# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nK2TO3YMy_a0Q9L2jZLKUjUxqP_2ppng
"""

#forma de la estrella
m=[[-1, -1, -1,  0, -1, -1, -1],
   [ 0, -1,  0, -1,  0, -1,  0],
   [-1,  0, -1, -1, -1,  0, -1],
   [ 0, -1,  0, -1,  0, -1,  0],
   [-1, -1, -1,  0, -1, -1, -1]
   ]
#estado inical de la estrella
RM=[[ 0,  0,  0,  3,  0,  0,  0],
    [ 1,  0,  11,  0,  12,  0,  2],
    [ 0,  8,  0,  0,  0,  5,  0],
    [ 4,  0,  7,  0,  9,  0,  6],
    [ 0,  0,  0,  10,  0,  0,  0]
   ]

c=0
#control de casillas
casilla=None
#casillas usadas
Usados=[]
#si encontro o no el valor de 27 en la fila  
Encontrado=False

def correr():
  listapasdos=[]
  m= backranig(m, listapasdos,False)


def backranig(m, listapasdos, pillado):
  if pillado ==True:
    Usados.append(m[casilla][casilla])
    if estadoFInal(m):
      print("llego al final")
      print(m)
      return m
    else:
      mayheuristica=0
      l=0
      contador=0
      soluciones=expandir(m)
      print(soluciones.size()+(" "))
      cantidadaumento=12
      if pillado == True:
        l=c
      caminoFavorable= soluciones.get(0)
      for i in soluciones.size():
        solucionX=soluciones.get(l)
        h=funcionheuristica(solucionX)
        if h > mayheuristica and not listapasados(solucionX,listapasdos):
          mayheuristica=h
          contador=l
          caminoFavorable=solucionX;
          c=c+1
        else:
          almacen += cantidadaumento
          l= almacen+c
      listapasdos.append(caminoFavorable)
      print("matriz :")
      sol=backranig(caminoFavorable,listapasdos,True)     
      if sol != None:
        return sol
      else:
        return None   
      

def  listapasados(m,listapasdos):
  for i in listapasdos.size():
    aux=listapasdos.get(i)
    cont=0
    for f in m.len():
      for j in m[f].leng():
        if m[f][j] > 0:
          if m[f][j] == aux[f][j]:
            cont=cont+1
      if cont == 12:
        return True
      else:
        return False  
  return False

def imprimir (m):
  for f in m.len():
    linea=" "
    for c in m[f].len():
      linea=linea+"["+m[f][c]+"]"
    print (linea)
  print("\n")


def estadoFInal(m):
  cont=0
  indice=0
  for f in m.len():
    for c in m[f].len():
      indice=indice+1
      if m[f][c] > 0:
          if m[f][c] == RM[f][c]:
            cont=cont+1
  if cont ==12:
    return True
  else:
    return False    


def funcionheuristica(m):
  cambio=0
  contadorheuristica=0
  for f in m.len():
    for c in m[f].len():
      elementos=m[f][c]
      if elementos > 0:
        contadorheuristica=0
        if elementos == RM[f][c] and not verificar(elementos):
          Encontrado=True
          casilla=(f,c)
          contadorheuristica=contadorheuristica+1
        else:
          Encontrado:False
          contadorheuristica=0
        if contadorheuristica == 1:
          cambio=cambio+1
  return cambio


def verificar(Dato):
  for i in Usados.size():
    if Usados.get()== Dato:
      return True
  return False

def expandir(m):
  soluciones=[]
  for f in m.len():
    for c in m[f].len():
      if m[f][c] == 0:
        hijo1=clonar(m)
        hijo1=1
        soluciones.append(hijo1)
        hijo2=clonar(m)
        hijo2=2
        soluciones.append(hijo2)
        hijo3=clonar(m)
        hijo3=3
        soluciones.append(hijo3)
        hijo4=clonar(m)
        hijo4=4
        soluciones.append(hijo4)
        hijo5=clonar(m)
        hijo5=5
        soluciones.append(hijo5)
        hijo6=clonar(m)
        hijo6=6
        soluciones.append(hijo6)
        hijo7=clonar(m)
        hijo7=7
        soluciones.append(hijo7)
        hijo8=clonar(m)
        hijo8=8
        soluciones.append(hijo8)
        hijo9=clonar(m)
        hijo9=9
        soluciones.append(hijo9)
        hijo10=clonar(m)
        hijo10=10
        soluciones.append(hijo10)
        hijo11=clonar(m)
        hijo11=11
        soluciones.append(hijo11)
        hijo12=clonar(m)
        hijo12=12
        soluciones.append(hijo12)
  return soluciones      

def clonar (m):
  clonhijo= [5][7]
  for f in range(len(clonhijo)):
    for c in range(len(f)):
      clonhijo[f][c]=m[f][c]
  return clonhijo

m=[]
pasados=[1,2,3,4,5,6,7,8,9,10,11,12]
llegar=backranig(m,pasados,True)